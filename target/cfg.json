{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":12361531129685994689,"abi":{"parameters":[{"name":"string","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"apps","type":{"kind":"array","length":7,"type":{"kind":"struct","path":"App","fields":[{"name":"rule","type":{"kind":"field"}},{"name":"position","type":{"kind":"field"}}]}},"visibility":"private"}],"param_witnesses":{"apps":[{"start":4,"end":18}],"string":[{"start":0,"end":4}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"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","file_map":{"47":{"source":"/*\n bb: c, b: cc\nRules:\n   S, Ac, A\n   Ac, A, C\n   A, a, 0\n   B, b, 0\n   C, c, 0\n   Bc, B, C\n */\n/*\n[S]          0, 0\n[ Ac A ]     1, 0  [ Ac->1 A ] \n[ A C A]     6, 2  [ Ac->2 A C ]\n[ A C Bc C ] 4, 3\n[ A C Bc c ] 5, 2\n[ A C B C c ]4, 3\n[ a C B C c ]3, 2\n[ a C b C c ]2, 0\n[ a C b c c ]4, 1\n[ a c b c c ]\n */\n\n\nglobal N = 4;//${LOG_STR_SIZE};\n\nglobal S = 1;\nglobal Ac = 2;\nglobal A = 3;\nglobal C = 4;\nglobal a = 5;\nglobal c = 6;\n\nglobal terminals = [\n\ta, // 0 \n\tc // 1\n];\n\nglobal non_terminals = [\n\tS, // 0\n\tAc, // 2\n\tA, // 3\n\tC, // 4\n];\n\nglobal rules = [\n    (S, Ac, Ac),  //0 \n    (Ac, Ac, Ac), //1\n    (Ac, A, C),   //2\n    (A, a, 0),   //3\n    (C, c, 0),   //4\n    (S, A, C),  //5\n]; \n\n\nstruct Node {\n    next: Field,\n    val: Field\n}\n\nfn node_equals(node1: Node, node2: Node) -> bool {\n\tlet bool_1 = (node1.next == node2.next);\n\tlet bool_2 = (node1.val == node2.val);\n\tbool_1*bool_2\n}\n\nstruct App {\n\trule: Field,\n\tposition: Field\n}\n\nunconstrained\nfn find_loc(list: [Node; N], loc: Field) -> Field {\n\tlet mut physical_loc: Field = 0; \n\tlet mut req_node = Node{next: -1, val: 0};\n\tlet mut curr_node = list[0];\n\tlet mut traversed = 0;\n\tfor _ in 0..N {\n\t\tif traversed == loc {\n\t\t\treq_node = curr_node;\n\t\t}\n\t\telse {\n\t\t\tcurr_node = list[curr_node.next];\n\t\t}\n\t\ttraversed += 1;\n\t}\n\tlet mut counter: Field = 0;\n\tfor i in 0..N {\n\t\tif node_equals(list[i], req_node) {\n\t\t\tphysical_loc = counter;\n\t\t}\n\t\tcounter = counter + 1;\n\t}\n\tphysical_loc\n}\n\nstruct Edge {\n\tparent: Field,\n\tchild: Field\n}\n\nstruct Rule {\n\tleft_child: Field,\n\tright_child: Field,\n}\n\nimpl Rule {\n\tfn new(left_child: Field, right_child: Field) -> Self {\n\t\tRule {\n\t\t\tleft_child: left_child,\n\t\t\tright_child: right_child\n\t\t}\n\t}\n}\n\nimpl Edge {\n\tfn new(parent: Field, child: Field) -> Self {\n\t\tEdge {\n\t\t\tparent: parent,\n\t\t\tchild: child\n\t\t}\n\t}\n}\n\n/** \n3*N - 2 edges, of which N should be in-edges to leaves and 2*N-2 are in-edges to non-terminals\nwhich means that the total number of productions is (2*N - 2)/ 2 + N = 2*N - 1\n**/ \n\nfn checkMemNaive(string: [Field; N], labels: [Field; 3*N - 1], edges: [Edge; 3*N - 2], \n\t\t\t\tmem_proofs_prod: [Field; 2*N - 1]) -> bool {\n\tlet mut output = true;\n\tlet mut productions = [Rule::new(-1, -1); 3*N - 1];\t\n\tfor i in 0..(3*N - 2) {\t\n\t\tlet parent = edges[i].parent;\n\t\tlet child = edges[i].child;\n\t\tif productions[parent].left_child == -1 {\n\t\t\tproductions[parent].left_child = child;\n\t\t}\n\t\telse if productions[parent].right_child == -1 {\n\t\t\tproductions[parent].right_child = child;\n\t\t}\n\t\telse {\n\t\t\t// This is the case where some node has more than two edges outgoing\n\t\t\toutput = false;\n\t\t}\n\t\tlet child_value_check = child == ((i + 1) as Field);\n\t\tlet parent_value_check = parent.lt((3*N - 1) as Field);\n\t\toutput = output * parent_value_check * child_value_check;\n\n\t}\n\n\tlet mut leaf_checked = 0; \t\t\t\t\n\toutput \n}\n\nfn main(string: [Field; N], apps: [App; 2*N-1]) {\n\n    // Start with Start symbol    \n    let mut list = [Node{next:0,val:0}; N];\n\n    list[0].val = S;\n    let mut listHead = 0; // Start of list\n    let mut listNext = 1; // next unallocated node\n\t\n\n    // Apply rules\n    for rl in apps {\n\t\t\n\t\tlet rule = rl.rule;\n\t\tlet physical_loc = rl.position;\n\t\tlet (nt, ntL, ntR) = rules[rule];\n\t\t// check rule applies to correct non terminal\n\t\tassert(list[physical_loc].val == nt);\n\t\t\n\t\tif (ntR == 0) { // NT to T\n\t\t\t// Replace in place\n\t\t\tlist[physical_loc].val = ntL;\n\t\t} else { // NT to (NT,NT)\n\t\t\t\n\t\t\t// Add a new node to the end\n\t\t\tlist[listNext].val = ntR;\n\t\t\tlist[physical_loc].val = ntL;\n\t\t\t\n\t\t\t// New node points to the next.\n\t\t\t// Modify current node to point to new one\n\t\t\tlist[listNext].next = list[physical_loc].next;\n\t\t\tlist[physical_loc].next = listNext;\n\t\t\tlistNext += 1;\n\t\t}\n    }\n\n    // Check final string matches\n    let mut cur = listHead;\n    for i in 0..N {\n\tassert(string[i] == list[cur].val);\n\t\tcur = list[cur].next;\n    }\n    assert(cur == 0);\n    \n}\n\n\n#[test]\nfn test_check_mem_naive() {\n    assert(checkMemNaive([a, c, a, c], \n\t [S, Ac, Ac, A, C, A, C, a, c, a, c], \n\t [Edge::new(0, 1), Edge::new(0, 2),\n\t Edge::new(1, 3), Edge::new(1, 4), \n\t Edge::new(2, 5), Edge::new(2, 6),\n\t Edge::new(3, 7), Edge::new(4, 8),\n\t Edge::new(5, 9), Edge::new(6, 10)],\n\t [0, 2, 2, 3, 4, 3, 4]) == true);\n}\n// #[test]\n// fn test_main() {\n//     main([a, c, a], // [S]\n// \t [(0,0),   // [Ac, A]\n// \t  (1,0),   // [A, A, C]\n// \t  (2,0), (2,1), (4,2) ]\n// /*\t [(0, 0),\n// \t  (1, 0),\n// \t  (6, 2),\n// \t  (4, 3),\n// \t  (5, 2),\n// \t  (4, 3),\n// \t  (3, 2),\n// \t  (2, 0),\n// \t  (4, 1)]*/);\n// }\n\n\n// global S = 1;\n// global Ac = 2;\n// global Bc = 3;\n// global A = 4;\n// global B = 5;\n// global C = 6;\n// global a = 7;\n// global b = 8;\n// global c = 9;\n\n// global rules = [\n//     (S, Ac, A),  //0 \n//     (Ac, A, C),  //1\n//     (A, a, 0),   //2\n//     (B, b, 0),   //3\n//     (C, c, 0),   //4\n//     (Bc, B, C),  //5\n//     (A, Bc, C),  //6\n// ]; \n\n// struct Node {\n//     next: Field,\n//     val: Field\n// }\n\n// fn main(string: [Field; N], apps: [(Field,Field); 2*N-1]) {\n\n//     // Start with Start symbol    \n//     let mut list = [Node{next:-1,val:0}; 2*N-1];\n//     list[0].val = S;\n//     let mut listHead = 0; // Start of list\n//     let mut listNext = 1; // next unallocated node\n\n//     // Apply rules\n//     for rl in apps {\n// \tlet (rule, loc) = rl;\n// \tlet (nt, ntL, ntR) = rules[rule];\n// \t// check rule applies to correct non terminal\n// \tassert(list[loc].val == nt);\n\t\n// \tif (ntR == 0) { // NT to T\n// \t    // Replace in place\n// \t    list[loc].val = ntL;\n// \t} else { // NT to (NT,NT)\n\t    \n// \t    // Add a new node to the end\n// \t    list[listNext].val = ntR;\n// \t    list[loc].val = ntL;\n\t    \n// \t    // New node points to the next.\n// \t    // Modify current node to point to new one\n// \t    list[listNext].next = list[loc].next;\n// \t    list[loc].next = listNext;\n// \t    listNext += 1;\n// \t}\n//     }\n\n//     // Check final string matches\n//     let mut cur = listHead;\n//     for i in 0..N {\n// \tassert(string[i] == list[cur].val);\n// \tcur = list[cur].next;\n//     }\n//     assert(cur == -1);\n    \n// }\n\n// #[test]\n// fn test_main() {\n//     main([a, c, a], // [S]\n// \t [(0,0),   // [Ac, A]\n// \t  (1,0),   // [A, A, C]\n// \t  (2,0), (2,1), (4,2) ]\n// /*\t [(0, 0),\n// \t  (1, 0),\n// \t  (6, 2),\n// \t  (4, 3),\n// \t  (5, 2),\n// \t  (4, 3),\n// \t  (3, 2),\n// \t  (2, 0),\n// \t  (4, 1)]*/);\n// }\n","path":"/Users/harjasleenmalvai/Documents/phdProjects/parsing_proofs/noir-cfg/src/main.nr"}}}