{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":619878954513574917,"abi":{"parameters":[{"name":"string","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"apps","type":{"kind":"array","length":7,"type":{"kind":"struct","path":"App","fields":[{"name":"rule","type":{"kind":"field"}},{"name":"position","type":{"kind":"field"}}]}},"visibility":"private"}],"param_witnesses":{"apps":[{"start":4,"end":18}],"string":[{"start":0,"end":4}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"td3RbiRHckbhd5lrweisiMyM0KsYvpDtNSBgoV2sZAPGYt/dM1UaLiyySdQH8G4G0kGT3WfYzfz7dP39y5//8h8//fbzX3759cuPf//y+PLjv/79y69//emXb3/79bef/vbblx/Hzvrhy59++c9vf1z7Hz98+a+f//ynLz/m/se//fBlvI308R2pR/wBOe4jcR/J+8i8j6z7yL6P1H2k7yPjAQw8/gMEGGDAAAUGODBAgvG2BbX+ydTjj0wB0/eZ4/Eh06+Ytz3o2d+ZfvWj4ziACWDe9OB4jPidOR7H/CMzgVnAbGAKmL7PxAOYAcwBTAADHgR4EOBBgAcBHgR4kOBBggcJHuTbHoz4/vPgGHP8kUlgJjALmA1MAdP3mfkAZgBzAAMeTPBgggcTPJjgwQQPJniwwIMFHqy3PTjm/s4c648/D1YA87YHx84Xpo8/MhOYBV/bBqaA6fvMfgAzgAEPNniwE5gJDHiwwYMNHmzwoN72IB4vTIz+IzOAOYAJYBKYCcwCZgNTwPR9psGDBg8aPGjwoMGD8exw490zNDrdoOMNOt+gA46xBSqB5KzrkMOug067Dji2eXLO8QGUAk2BlkBy5nXIodcBp14jHgINgcSIECNCjAgxIsSIECNCjAgxIsWIFCNSjEgxIsWIFCNSjEgxIsWI/NiIV6fc4+0jkPePn8ccAh0CwanomCnQFGgJtAUqgeBsdKyHQEOgQyAxYokRS4xYYsQSI5YYscSILUZsMeLJwcgYj5dDtVGvoBAoBZoCLYG2QCVQA/TkgOQDaAgkRpQYUWJEiRElRpQYUWJEiREtRrQY0WJEw5oynhyXfABNgZZAW6ASCDaV4/EQaAh0CBQCpUBToCXQFqgEglP1YzwEGvd3qWMcAoV8eSnQFGgJtAUqgcSIQ4w4hkCHQGLEIUYcYsQhRhywtxxHCQSLyxEPgYZAh0AhUAo0BVoCiREhRoQYkWJEihEpRqQY8eSMJXK8QDNfQU+2mveGuGPBW5OPFQKlQFOgJdAWqASC9e7YD4HgZP7Yh0AhUAo0BVoCbYFKIHnPej0EEiNKjCgxosSIEiNKjCgxosSIEiNajGgxosWIFiNajGgxosWIFiP6YyNe5yZvn7G8P4/F4yHQEEiShoc0DU/OWD6ApGp4SNbwkK7hIWHDQwqXQYmLNC5DjBhixBAjhhgxxIghRgwxYogRhxhxwMl8HIdAIVAKNAVaAm2BSiDYaiIeAokRIUaEGBFiRIgRIUaEGBFiRIgRKUakGJFiRIoREsWFVHEhWVxIFxcSxoWUcSFpXEgbFxLHhdRxIXlcSB8XEsiFFHIhiVxIIxcLtppYQyBY7+JZJ/c+lPLlTYGWQFugEgjWu5BcLqSXCwnmQoq5kGQupJkLieZCqrnYsNXEhq0mJJwLKedC0rmQdi4kngup50LyuZB+LiSgCynoQhK6kIYuJKILqehCMrp8csby7uSX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LepbR3Ke1dSnuX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LepbR3Ke1dSnuX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LepbR3Ke1dSnuX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LepbR3Ke1dSnuX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LepbR3Ke1dSnuX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LepbR3Ke1dSnuX0t6ltHcp7V1Ke5fS3qW0dyntXUp7l9LeZYsRLUZIe5fS3qW0dyntXUp7N6W9m9LeTWnvprR385ECyadbSns3pb2b0t7Nhxgx6KNOYauZ4xAI1rv5rL17H5ry5S2BtkAlEKx3U9q7Ke3dlPZuSns3pb2b0t5Nae/mIUYcYoS0d1Pauynt3ZT2bkp7N6W9m9LeTWnvprR3U9q7Ke3dlPZuSns3pb2b0t7NFCNSjHhyxvLu5DeftXfvTX5T2rsp7d2U9m5KezelvZvS3k1p7+YeAh0Cwcn8lPZuSns3pb2b0t5Nae+mtHdT2rsp7d2U9m5KezelvZvS3k1p76a0d1Pauynt3ZT2bkp7N6W9m9LeTWnvprR3U9q7Ke3dbDGiwYj1gItKLWnv1uMQKATK+8PBkvZuSXu3pL1b0t4tae+WtHdL2rsl7d2S9m5Je7ekvVvS3i1p75a0d0vauyXt3TrEiEOMkPZuSXu3pL1b0t4tae+WtHdL2rsl7d2S9m5Je7ekvVvS3i1p75a0d0vauyXt3ZL2bkl7t6S9W9LeLWnvVooRKUZIe7ekvVvS3i1p75a0d0vauyXt3ZL2bkl7t6S9W9LeLWnvlrR3i65PRxeooyvU0SXq6Bp1dJE6u0qdXKaOrlNHF6qT9m5Je7ekvVvS3i1p75a0d0vauyXt3ZL2bskl65Zcs25Je7ekvVvS3i1p75a0d0vauyXt3ZL2bkl7t6S9W9LeLWnvlrR3S9q7Je3dajGiwYj95Izl3clvP2vv3pv8trR3W9q7Le3dlvZuS3u3pb3b0t7t4xAoBMr7B9Jb2rst7d2W9m5Le7elvdvS3m1p77a0d1vauy3t3Zb2bkt7t6W929LebWnvtrR3W9q7Le3dlvZuS3u3pb3b0t5tae+2tHc7xYgpRsyPjejXEKx3e4ZAKRBsNVvauy3t3Zb2bkt7t6W929LebWnvtrR3W9q7Le3dlvZuS3u3pb3b0t5tae+2tHd7ixFbjJD2bkt7t6W929LebWnvtrR3W9q7Le3dlvZuS3u3pb3b0t5tae+2tHdb2rst7d2W9m5Le7elvdvS3m1p73aLES1GSHu3pb3b0t6VtHcl7V1Je1fS3tUjBZoCLYG2QCWQGCHtXQ0xYogRct27kuve1YD1rp61d+9DW768Egi2mpL2rqS9K2nvStq7kvaupL0rae9K2ruS9q4OMSLECGnvStq7kvaupL0rae9K2ruS9q6kvStp70rau5L2rqS9K2nvStq7kvauUoxIMeLJGcu7k189a+/em/xK2ruS9q6kvStp70rau5L2rqS9qx0CpUBwMl/S3pW0dyXtXUl7V9LelbR3Je1dSXtX0t6VtHcl7V1Je1fS3pW0dyXtXUl7V9LelbR3Je1dSXtX0t6VtHcl7V1Je9ePh0BDoI+N6NcQrHf99hnLR9AUCLaalvaupb1rae9a2ruW9q6lvWtp71rau5b2rqW9a2nvWtq7lvaupb1rae9a2rs+xIhDjJD2rqW9a2nvWtq7lvaupb1rae9a2ruW9q6lvWtp71rau5b2rqW9a2nvWtq7lvaupb1rae9a2ruW9q5TjEgxQtq7lvaupb1rae9a2ruW9q6lvWtp71rau5b2rqW9a2nvWtq7lvaulxixxAi57l3Lde96wXrXz9q796GSLw+2mpb2rqW9a2nvWtq7lvaupb1rae9a2ruW9q6lvesSI0qMkPaupb1rae9a2ruW9q6lvWtp71rau5b2rqW9a2nvWtq7lvaupb1rae+6xYgGI8bjySFL/vOfbla8phZRm6i3v6/cLy+zc7/xfbVQT05aPqIGUQdRQVQSNYlaRG2iyI2D3AhyI8iNIDeC3AhyI8iNIDeC3AhyI8iNJDeS3Hhy/vLBT9EnBzDZL7+IzMcbVBI1iSI3ktxIcuPJMcwH9/yTc5gP7o0nBzEfUQdR9HNj0s+NST83Jr3eeHIc89G9UUS1UE9OZObx8n3N+OMvTo9/efML/LpQ/s58nR1fIX0feXuH/IAZwBzAvGns14PI78yM10wCM4FZwGxgCpi+z7z9mvgDZgDztgf7+z+Fr7/Gv2YCmARmArOA2cAUMH2fefv17wfMAAY8CPAgwIMADwI8CPAgwIMADxI8SPAgwYMED558+sTj5dzk6x/rNTWJWkRtoZ58LsTXE4QX6nh9bzz5YIiPqLfvw/Fyx3/94xtf4SRqEbWJKqHeXr/G6Jf7cPTr+/DJ5XI+ot6+N4798vb7o16/fnryXvVj5At1jNfUIOogKohKoiZRi6hNVBHVQhW5UeRGkRtFbhS5UeRGkRtFbhS5UeRGkxtNbjS50eRGkxtNbjS50eTGk/exH4+X93wf8f/efvDDq/957e9vv9iP17+0PXnP+50b2Mf3vGznG7+xPnmD/K1byO9P13s93riFuHkLv2Np2DJsy/P8eJRhTdh4GDYMOwwLw9KwLa+nx5MPHf06DL1g+fqF53jyYaAfYodhT16xPl5+Jo23vrcnHwn6ITYNW4Ztw8qwJuzJx4N+iA3DDsPMkjBLwiwJsyTMkjBLwixJsyTNkjRL0ixJsyTNkjRL0ixJsyTNkmmWTHvqePKpoB9iadg0zB63Z4dG/7y1ryK9gTVh62HYMOwwLAxLw+Z97OtDeX9X/Qa1QPe31ZMaRB1E3V5YTyqJmkQtojZRRVQLdX9vPalB1O2N5aSCqCRqErWI2kQVUS3U/Q32pAZR5EaQG0FuBLkR5EaQG0FuBLmR5EaSG0luJLkh++zJTeQWcts42WlPbiD35EXVe5vmyU3kFnIbuTJOVtuTC+Rguf3GyXZ7cgO5A7lALpGbyC3kNnKFXBtX6EuhL4W+FPpS6EuhL4W+FPpS6EuhL42+NPrS6EujL42+NPrS6EujL5+8+Z438bmr73VC8rm773UbsPxeYCq4FIT99wJLwUZQVuALHAoeCoaCqSDswRcIi/B1/DcUPBSELecCU8Gp4FJwK1gKNoKyEl/gUPBQUM0JNSfUnFBzQs0JNSfUnFRzUs1JNSfVnFRzUs1JNSfVnFRzUs2Zas7UJx1ZlC8wFZwK6uMoy/IFNoKyLl/gUPBQMBRMBWFnPta4vzN/g1qg+zvzSQ2iDqJu78wnlURNohZRm6giqoW6vzOf1CDq9l50UkFUEjWJWkRtooqoFur+znxSgyhyI8iNIDeC3AhyI8iNIDeC3EhyI8mNJDeS3JCd+eQmcgu5bZzszCc3kHvysuq9HfbkJnILuY1cGSc788kFcrAzf+NkZz65gdyBXCCXyE3kFnIbuUKujSv0pdCXQl8KfSn0pdCXQl8KfSn0pdCXRl8afWn0pdGXRl8afWn0pdGXT96Zz5v43J35OiH53J35ug3YmS8wFVwKws58gaVgIyg78wUOBQ8FQ8FUEHbmC4Sd+Tr+GwoeCsLmc4Gp4FRwKbgVLAUbQdmZL3AoeCio5oSaE2pOqDmh5oSaE2pOqjmp5qSak2pOqjmp5qSak2pOqjmp5kw1Z+qTjuzMF5gKTgX1cZSd+QIbQdmZL3AoeCgYCqaCsDPngJ75G9QC3d+ZT2oQdRB1e2c+qSRqErWI2kQVUS3U/Z35pAZRt/eikwqikqhJ1CJqE1VEtVD3d+aTGkSRG0FuBLkR5EaQG0FuBLkR5EaSG0luJLmR5IbszCc3kVvIbeNkZz65gdyTl1Xv7bAnN5FbyG3kyjjZmU8ukIOd+RsnO/PJDeQO5AK5RG4it5DbyBVybVyhL4W+FPpS6EuhL4W+FPpS6EuhL4W+NPrS6EujL42+NPrS6EujL42+fPLOfN7E5+7M1wnJ5+7M123AznyBqeBSEHbmCywFG0HZmS9wKHgoGAqmgrAzXyDszNfx31DwUBA2nwtMBaeCS8GtYCnYCMrOfIFDwUNBNSfUnFBzQs0JNSfUnFBzUs1JNSfVnFRzUs1JNSfVnFRzUs1JNWeqOVOfdGRnvsBUcCqoj6PszBfYCMrOfIFDwUPBUDAVhJ15rri/M3+DWqD7O/NJDaIOom7vzCeVRE2iFlGbqCKqhbq/M5/UIOr2XnRSQVQSNYlaRG2iiqgW6v7OfFKDKHIjyI0gN4LcCHIjyI0gN4LcSHIjyY0kN5LckJ355CZyC7ltnOzMJzeQe/Ky6r0d9uQmcgu5jVwZJzvzyQVysDN/42RnPrmB3IFcIJfITeQWchu5Qq6NK/Sl0JdCXwp9KfSl0JdCXwp9KfSl0JdGXxp9afSl0ZdGXxp9afSl0ZdP3pnPm/jcnfk6Ifncnfm6DdiZLzAVXArCznyBpWAjKDvzBQ4FDwVDwVQQduYLhJ35Ov4bCh4KwuZzgangVHApuBUsBRtB2ZkvcCh4KKjmhJoTak6oOaHmhJoTak6qOanmpJqTak6qOanmpJqTak6qOanmTDVn6pOO7MwXmApOBfVxlJ35AhtB2ZkvcCh4KBgKpoKwM++R93fmb1ALdH9nPqlB1EHU7Z35pJKoSdQiahNVRLVQ93fmkxpE3d6LTiqISqImUYuoTVQR1ULd35lPahBFbgS5EeRGkBtBbgS5EeRGkBtJbiS5keRGkhuyM5/cRG4ht42TnfnkBnJPXla9t8Oe3ERuIbeRK+NkZz65QA525m+c7MwnN5A7kAvkErmJ3EJuI1fItXGFvhT6UuhLoS+FvhT6UuhLoS+FvhT60uhLoy+NvjT60uhLoy+NvjT68sk783kTn7szXyckn7szX7cBO/MFpoJLQdiZL7AUbARlZ77AoeChYCiYCsLOfIGwM1/Hf0PBQ0HYfC4wFZwKLgW3gqVgIyg78wUOBQ8F1ZxQc0LNCTUn1JxQc0LNSTUn1ZxUc1LNSTUn1ZxUc1LNSTUn1Zyp5kx90pGd+QJTwamgPo6yM19gIyg78wUOBQ8FQ8FUEHbmWvP+zvwNaoHu78wnNYg6iLq9M59UEjWJWkRtooqoFur+znxSg6jbe9FJBVFJ1CRqEbWJKqJaqPs780kNosiNIDeC3AhyI8iNIDeC3AhyI8mNJDeS3EhyQ3bmk5vILeS2cbIzn9xA7snLqvd22JObyC3kNnJlnOzMJxfIwc78jZOd+eQGcgdygVwiN5FbyG3kCrk2rtCXQl8KfSn0pdCXQl8KfSn0pdCXQl8afWn0pdGXRl8afWn0pdGXRl8+eWc+b+Jzd+brhORzd+brNmBnvsBUcCkIO/MFloKNoOzMFzgUPBQMBVNB2JkvEHbm6/hvKHgoCJvPBaaCU8Gl4FawFGwEZWe+wKHgoaCaE2pOqDmh5oSaE2pOqDmp5qSak2pOqjmp5qSak2pOqjmp5qSaM9WcqU86sjNfYCo4FdTHUXbmC2wEZWe+wKHgoWAomAre3pm//uV/fvrbzz/9+5//9OtX5Nt/++9f/uO3n//yy+9//e1//3r9l3/8Hw==","file_map":{"47":{"source":"/*\n bb: c, b: cc\nRules:\n   S, Ac, A\n   Ac, A, C\n   A, a, 0\n   B, b, 0\n   C, c, 0\n   Bc, B, C\n */\n/*\n[S]          0, 0\n[ Ac A ]     1, 0  [ Ac->1 A ] \n[ A C A]     6, 2  [ Ac->2 A C ]\n[ A C Bc C ] 4, 3\n[ A C Bc c ] 5, 2\n[ A C B C c ]4, 3\n[ a C B C c ]3, 2\n[ a C b C c ]2, 0\n[ a C b c c ]4, 1\n[ a c b c c ]\n */\n\n\nglobal N = 4;\n\nglobal S = 1;\nglobal Ac = 2;\nglobal A = 3;\nglobal C = 4;\nglobal a = 5;\nglobal c = 6;\n\nglobal rules = [\n    (S, Ac, Ac),  //0 \n    (Ac, Ac, Ac), //1\n    (Ac, A, C),   //2\n    (A, a, 0),   //3\n    (C, c, 0),   //4\n    (S, A, C),  //5\n]; \n\n\nstruct Node {\n    next: Field,\n    val: Field\n}\n\nfn node_equals(node1: Node, node2: Node) -> bool {\n\tlet bool_1 = (node1.next == node2.next);\n\tlet bool_2 = (node1.val == node2.val);\n\tbool_1*bool_2\n}\n\nstruct App {\n\trule: Field,\n\tposition: Field\n}\n\nunconstrained\nfn find_loc(list: [Node; N], loc: Field) -> Field {\n\tlet mut physical_loc: Field = 0; \n\tlet mut req_node = Node{next: -1, val: 0};\n\tlet mut curr_node = list[0];\n\tlet mut traversed = 0;\n\tfor _ in 0..N {\n\t\tif traversed == loc {\n\t\t\treq_node = curr_node;\n\t\t}\n\t\telse {\n\t\t\tcurr_node = list[curr_node.next];\n\t\t}\n\t\ttraversed += 1;\n\t}\n\tlet mut counter: Field = 0;\n\tfor i in 0..N {\n\t\tif node_equals(list[i], req_node) {\n\t\t\tphysical_loc = counter;\n\t\t}\n\t\tcounter = counter + 1;\n\t}\n\tphysical_loc\n}\n\nfn main(string: [Field; N], apps: [App; 2*N-1]) {\n\n    // Start with Start symbol    \n    let mut list = [Node{next:0,val:0}; N];\n\n    list[0].val = S;\n    let mut listHead = 0; // Start of list\n    let mut listNext = 1; // next unallocated node\n\t\n\n    // Apply rules\n    for rl in apps {\n\t\t\n\t\tlet rule = rl.rule;\n\t\tlet loc = rl.position;\n\t\t//print(\"List = \");\n\t\t//println(list);\n\t\t//print(\"loc\");\n\t\t//println(loc);\n\t\tlet physical_loc = find_loc(list, loc);\n\t\tlet (nt, ntL, ntR) = rules[rule];\n\t\t// check rule applies to correct non terminal\n\t\tassert(list[physical_loc].val == nt);\n\t\t\n\t\t\n\t\t//print(\"Physical loc\");\n\t\t//println(physical_loc);\n\t\tif (ntR == 0) { // NT to T\n\t\t\t// Replace in place\n\t\t\tlist[physical_loc].val = ntL;\n\t\t} else { // NT to (NT,NT)\n\t\t\t\n\t\t\t// Add a new node to the end\n\t\t\tlist[listNext].val = ntR;\n\t\t\tlist[physical_loc].val = ntL;\n\t\t\t\n\t\t\t// New node points to the next.\n\t\t\t// Modify current node to point to new one\n\t\t\tlist[listNext].next = list[physical_loc].next;\n\t\t\tlist[physical_loc].next = listNext;\n\t\t\tlistNext += 1;\n\t\t}\n    }\n\n    // Check final string matches\n    let mut cur = listHead;\n    for i in 0..N {\n\tassert(string[i] == list[cur].val);\n\t\tcur = list[cur].next;\n    }\n    assert(cur == 0);\n    \n}\n\n// #[test]\n// fn test_main() {\n//     main([a, c, a], // [S]\n// \t [(0,0),   // [Ac, A]\n// \t  (1,0),   // [A, A, C]\n// \t  (2,0), (2,1), (4,2) ]\n// /*\t [(0, 0),\n// \t  (1, 0),\n// \t  (6, 2),\n// \t  (4, 3),\n// \t  (5, 2),\n// \t  (4, 3),\n// \t  (3, 2),\n// \t  (2, 0),\n// \t  (4, 1)]*/);\n// }\n\n\n// global S = 1;\n// global Ac = 2;\n// global Bc = 3;\n// global A = 4;\n// global B = 5;\n// global C = 6;\n// global a = 7;\n// global b = 8;\n// global c = 9;\n\n// global rules = [\n//     (S, Ac, A),  //0 \n//     (Ac, A, C),  //1\n//     (A, a, 0),   //2\n//     (B, b, 0),   //3\n//     (C, c, 0),   //4\n//     (Bc, B, C),  //5\n//     (A, Bc, C),  //6\n// ]; \n\n// struct Node {\n//     next: Field,\n//     val: Field\n// }\n\n// fn main(string: [Field; N], apps: [(Field,Field); 2*N-1]) {\n\n//     // Start with Start symbol    \n//     let mut list = [Node{next:-1,val:0}; 2*N-1];\n//     list[0].val = S;\n//     let mut listHead = 0; // Start of list\n//     let mut listNext = 1; // next unallocated node\n\n//     // Apply rules\n//     for rl in apps {\n// \tlet (rule, loc) = rl;\n// \tlet (nt, ntL, ntR) = rules[rule];\n// \t// check rule applies to correct non terminal\n// \tassert(list[loc].val == nt);\n\t\n// \tif (ntR == 0) { // NT to T\n// \t    // Replace in place\n// \t    list[loc].val = ntL;\n// \t} else { // NT to (NT,NT)\n\t    \n// \t    // Add a new node to the end\n// \t    list[listNext].val = ntR;\n// \t    list[loc].val = ntL;\n\t    \n// \t    // New node points to the next.\n// \t    // Modify current node to point to new one\n// \t    list[listNext].next = list[loc].next;\n// \t    list[loc].next = listNext;\n// \t    listNext += 1;\n// \t}\n//     }\n\n//     // Check final string matches\n//     let mut cur = listHead;\n//     for i in 0..N {\n// \tassert(string[i] == list[cur].val);\n// \tcur = list[cur].next;\n//     }\n//     assert(cur == -1);\n    \n// }\n\n// #[test]\n// fn test_main() {\n//     main([a, c, a], // [S]\n// \t [(0,0),   // [Ac, A]\n// \t  (1,0),   // [A, A, C]\n// \t  (2,0), (2,1), (4,2) ]\n// /*\t [(0, 0),\n// \t  (1, 0),\n// \t  (6, 2),\n// \t  (4, 3),\n// \t  (5, 2),\n// \t  (4, 3),\n// \t  (3, 2),\n// \t  (2, 0),\n// \t  (4, 1)]*/);\n// }\n","path":"/Users/harjasleenmalvai/Documents/phdProjects/parsing_proofs/noir-cfg/build_circuits/2^2/src/main.nr"}}}